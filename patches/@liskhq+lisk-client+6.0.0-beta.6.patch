diff --git a/node_modules/@liskhq/lisk-client/dist-browser/index.js b/node_modules/@liskhq/lisk-client/dist-browser/index.js
index e21194e..667ed9a 100644
--- a/node_modules/@liskhq/lisk-client/dist-browser/index.js
+++ b/node_modules/@liskhq/lisk-client/dist-browser/index.js
@@ -4718,6 +4718,7 @@ var KDF;
     KDF["PBKDF2"] = "PBKDF2";
 })(KDF = exports.KDF || (exports.KDF = {}));
 const encryptAES128GCMWithPassword = async (plainText, password, options) => {
+  console.log({options})
     var _a, _b, _c, _d, _e, _f, _g;
     const kdf = (_a = options === null || options === void 0 ? void 0 : options.kdf) !== null && _a !== void 0 ? _a : KDF.ARGON2;
     const IV_BUFFER_SIZE = 16;
@@ -4727,7 +4728,13 @@ const encryptAES128GCMWithPassword = async (plainText, password, options) => {
     const iterations = kdf === KDF.ARGON2 ? ARGON2_ITERATIONS : (_c = (_b = options === null || options === void 0 ? void 0 : options.kdfparams) === null || _b === void 0 ? void 0 : _b.iterations) !== null && _c !== void 0 ? _c : PBKDF2_ITERATIONS;
     const parallelism = (_e = (_d = options === null || options === void 0 ? void 0 : options.kdfparams) === null || _d === void 0 ? void 0 : _d.parallelism) !== null && _e !== void 0 ? _e : ARGON2_PARALLELISM;
     const memorySize = (_g = (_f = options === null || options === void 0 ? void 0 : options.kdfparams) === null || _f === void 0 ? void 0 : _f.memorySize) !== null && _g !== void 0 ? _g : exports.ARGON2_MEMORY;
-    const key = kdf === KDF.ARGON2
+    const key = options.getKey ? await options.getKey({
+          password,
+          salt,
+          iterations,
+          parallelism,
+          memorySize,
+      }): kdf === KDF.ARGON2
         ? await getKeyFromPasswordWithArgon2({
             password,
             salt,
@@ -4769,10 +4776,16 @@ const getTagBuffer = (tag) => {
     }
     return tagBuffer;
 };
-async function decryptAES128GCMWithPassword(encryptedMessage, password, encoding) {
+async function decryptAES128GCMWithPassword(encryptedMessage, password, encoding, options) {
     const { kdf, ciphertext, cipherparams: { iv, tag }, kdfparams: { parallelism, salt, iterations, memorySize }, } = encryptedMessage;
     const tagBuffer = getTagBuffer(tag);
-    const key = kdf === KDF.ARGON2
+    const key = options.getKey ? await options.getKey({
+          password,
+          salt: (0, utils_1.hexToBuffer)(salt, 'Salt'),
+          iterations,
+          parallelism,
+          memorySize,
+      }): kdf === KDF.ARGON2
         ? await getKeyFromPasswordWithArgon2({
             password,
             salt: (0, utils_1.hexToBuffer)(salt, 'Salt'),
